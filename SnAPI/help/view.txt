%hyperhelp title="sublime.View Class" date="2017-12-23"


*|View|* Class
==========

Represents a view into a text buffer. Note that multiple views may refer to the
same buffer, but they have their own unique selection and geometry.

This class is contained in the |sublime| module.


*view.id*()
  Return: int

    Returns a number that uniquely identifies this view.


*view.buffer_id*()
  Return: int

    Returns a number that uniquely identifies the buffer underlying this view.


*view.is_primary*()
  Return: bool

    If the view is the primary view into a file. Will only be `False` if the
    user has opened multiple views into a file.


*view.file_name*()
  Return: str

    The full name file the file associated with the buffer, or `None` if it
    doesn't exist on disk.


*view.name*()
  Return: str

    The name assigned to the buffer, if any


*view.set_name*(name)
  Return: None

    Assigns a name to the buffer


*view.is_loading*()
  Return: bool

    Returns `True` if the buffer is still loading from disk, and not ready for
    use.


*view.is_dirty*()
  Return: bool

    Returns `True` if there are any unsaved modifications to the buffer.


*view.is_read_only*()
  Return: bool

    Returns `True` if the buffer may not be modified.


*view.set_read_only*(value)
  Return: None

    Sets the read only property on the buffer.


*view.is_scratch*()
  Return: bool

    Returns `True` if the buffer is a scratch buffer. Scratch buffers never
    report as being dirty.


*view.set_scratch*(value)
  Return: None

    Sets the scratch property on the buffer.


*view.settings*()
  Return: |Settings|

    Returns a reference to the view's settings object. Any changes to this
    settings object will be private to this view.


*view.window*()
  Return: |Window|

    Returns a reference to the window containing the view.


*view.run_command*(string, <args>)
  Return: None

    Runs the named |TextCommand| with the (optional) given args.


*view.size*()
  Return: int

    Returns the number of character in the file.


*view.substr*(region)
  Return: str

    Returns the contents of the `region` as a string.


*view.substr*(point)
  Return: str

    Returns the character to the right of the `point`.


*view.insert*(edit, point, string)
  Return: int

    Inserts the given `string` in the buffer at the specified `point`. Returns
    the number of characters inserted: this may be different if tabs are being
    translated into spaces in the current buffer.


*view.erase*(edit, region)
  Return: None

    Erases the contents of the `region` from the buffer.


*view.replace*(edit, region, string)
  Return: None

    Replaces the contents of the `region` with the given `string`.


*view.sel*()
  Return: |Selection|

    Returns a reference to the selection.


*view.line*(point)
  Return: |Region|

    Returns the line that contains the `point`.


*view.line*(region)
  Return: |Region|

    Returns a modified copy of `region` such that it starts at the beginning of
    a line, and ends at the end of a line. Note that it may span several lines.


*view.full_line*(point)
  Return: |Region|

    As `line()`, but the region includes the trailing newline character, if any.


*view.full_line*(region)
  Return: |Region|

    As `line()`, but the region includes the trailing newline character, if any.


*view.lines*(region)
  Return: [|Region|]

    Returns a list of lines (in sorted order) intersecting the `region`.


*view.split_by_newlines*(region)
  Return: [|Region|]

    Splits the `region` up such that each region returned exists on exactly one
    line.


*view.word*(point)
  Return: |Region|

    Returns the word that contains the `point`.


*view.word*(region)
  Return: |Region|

    Returns a modified copy of `region` such that it starts at the beginning of
    a word, and ends at the end of a word. Note that it may span several words.


*view.classify*(point)
  Returns: int

    Classifies `point`, returning a bitwise OR of zero or more of these flags:

      * `sublime.CLASS_WORD_START`
      * `sublime.CLASS_WORD_END`
      * `sublime.CLASS_PUNCTUATION_START`
      * `sublime.CLASS_PUNCTUATION_END`
      * `sublime.CLASS_SUB_WORD_START`
      * `sublime.CLASS_SUB_WORD_END`
      * `sublime.CLASS_LINE_START`
      * `sublime.CLASS_LINE_END`
      * `sublime.CLASS_EMPTY_LINE`


*view.find_by_class*(point, forward, classes, <separators>)
  Returns: |Region|

    Finds the next location after point that matches the given `classes`. If
    `forward` is `False`, searches backwards instead of forwards. `classes` is a
    bitwise OR of the `sublime.CLASS_XXX` flags. `separators` may be passed in,
    to define what characters should be considered to separate words.


*view.expand_by_class*(point, classes, <separators>)
  Returns: |Region|

    Expands `point` to the left and right, until each side lands on a location
    that matches `classes`. `classes` is a bitwise OR of the `sublime.CLASS_XXX`
    flags. separators may be passed in, to define what characters should be
    considered to separate words.


*view.expand_by_class*(region, classes, <separators>)
  Returns: |Region|

    Expands `region` to the left and right, until each side lands on a location
    that matches `classes`. `classes` is a bitwise OR of the `sublime.CLASS_XXX`
    flags. `separators` may be passed in, to define what characters should be
    considered to separate words.


*view.find*(pattern, start_point, <flags>)
  Returns: |Region|

    Returns the first region matching the regex `pattern`, starting from
    `start_point`, or `None` if it can't be found. The optional `flags`
    parameter may be `sublime.LITERAL`, `sublime.IGNORECASE`, or the two ORed
    together.


*view.find_all*(pattern, <flags>, <format>, <extractions>)
  Returns: [|Region|]

    Returns all (non-overlapping) regions matching the regex `pattern`. The
    optional `flags` parameter may be `sublime.LITERAL`, `sublime.IGNORECASE`,
    or the two ORed together. If a `format` string is given, then all matches
    will be formatted with the formatted string and placed into the extractions
    list.


*view.rowcol*(point)
  Returns: (int, int)

    Calculates the 0-based line and column numbers of the `point`.


*view.text_point*(row, col)
  Returns: int

    Calculates the character offset of the given, 0-based, `row` and `col`. Note
    that `col` is interpreted as the number of characters to advance past the
    beginning of the row.


*view.set_syntax_file*(syntax_file)
  Returns: None

    Changes the syntax used by the view. `syntax_file` should be a name along the
    lines of `Packages/Python/Python.tmLanguage`. To retrieve the current syntax,
    use `view.settings().get('syntax')`.


*view.extract_scope*(point)
  Returns: |Region|

    Returns the extent of the syntax scope name assigned to the character at the
    given `point`.


*view.scope_name*(point)
  Returns: str

    Returns the syntax scope name assigned to the character at the given
    `point`.


*view.match_selector*(point, selector)
  Returns: bool

    Checks the `selector` against the scope at the given `point`, returning a
    bool if they match.


*view.score_selector*(point, selector)
  Returns: int

    Matches the `selector` against the scope at the given `point`, returning a
    score. A score of `0` means no match, above `0` means a match. Different
    selectors may be compared against the same scope: a higher score means the
    selector is a better match for the scope.


*view.find_by_selector*(selector)
  Returns: [Region]

    Finds all regions in the file matching the given `selector`, returning them
    as a list.


*view.show*(location, <show_surrounds>)
  Returns: None

    Scroll the view to show the given `location`, which may be a |point|,
    |Region| or |Selection|.


*view.show_at_center*(location)
  Returns: None

    Scroll the view to center on the `location`, which may be a |point| or
    |Region|.


*view.visible_region*()
  Returns: |Region|

    Returns the currently visible area of the view.


*view.viewport_position*()
  Returns: |vector|

    Returns the offset of the viewport in layout coordinates.


*view.set_viewport_position*(vector, <animate<)
  Returns: None

    Scrolls the viewport to the given layout position.


*view.viewport_extent*()
  Returns: |vector|

    Returns the width and height of the viewport.


*view.layout_extent*()
  Returns: |vector|

    Returns the width and height of the layout.


*view.text_to_layout*(point)
  Returns: |vector|

    Converts a text position to a layout position


*view.layout_to_text*(vector)
  Returns: |point|

    Converts a layout position to a text position


*view.window_to_layout*(vector)
  Returns: |vector|

    Converts a window position to a layout position


*view.window_to_text*(vector)
  Returns: |point|

    Converts a window position to a text position


*view.line_height*()
  Returns: |dip|

    Returns the light height used in the layout


*view.em_width*()
  Returns: |dip|

    Returns the typical character width used in the layout


*view.add_regions*(key, [regions], <scope>, <icon>, <flags>)
  Returns: None

    Add a set of `regions` to the view. If a set of `regions` already exists
    with the given key, they will be overwritten. The `scope` is used to source
    a color to draw the `regions` in, it should be the name of a scope, such as
    `"comment"` or `"string"`. If the `scope` is empty, the `regions` won't be
    drawn.

    The optional `icon` name, if given, will draw the named icons in the gutter
    next to each region. The `icon` will be tinted using the color associated
    with the scope. Valid icon names are `dot`, `circle`, `bookmark` and
    `cross`. The icon name may also be a full package relative path, such as
    `Packages/Theme - Default/dot.png`.

    The optional flags parameter is a bitwise combination of:

    * `sublime.DRAW_EMPTY`: Draw empty regions with a vertical bar. By default,
      they aren't drawn at all.

    * `sublime.HIDE_ON_MINIMAP`: Don't show the regions on the minimap.

    * `sublime.DRAW_EMPTY_AS_OVERWRITE`: Draw empty regions with a horizontal
      bar instead of a vertical one.

    * `sublime.DRAW_NO_FILL`: Disable filling the regions, leaving only the
      outline.

    * `sublime.DRAW_NO_OUTLINE`: Disable drawing the outline of the regions.

    * `sublime.DRAW_SOLID_UNDERLINE`: Draw a solid underline below the regions.

    * `sublime.DRAW_STIPPLED_UNDERLINE`: Draw a stippled underline below the
      regions.

    * `sublime.DRAW_SQUIGGLY_UNDERLINE`: Draw a squiggly underline below the
      regions.

    * `sublime.PERSISTENT`: Save the regions in the session.

    * `sublime.HIDDEN`: Don't draw the regions.

    The underline styles are exclusive, either zero or one of them should be
    given. If using an underline, `sublime.DRAW_NO_FILL` and
    `sublime.DRAW_NO_OUTLINE` should generally be passed in.


*view.get_regions*(key)
  Returns: [|Region|]

    Return the regions associated with the given `key`, if any


*view.erase_regions*(key)
  Returns: None

    Removed the named regions


*view.set_status*(key, value)
  Returns: None

    Adds the status `key` to the view. The `value` will be displayed in the
    status bar, in a comma separated list of all status values, ordered by key.
    Setting the `value` to the empty string will clear the status.


*view.get_status*(key)
  Returns: str

    Returns the previously assigned value associated with the `key`, if any.


*view.erase_status*(key)
  Returns: None

    Clears the named status.


*view.command_history*(index, <modifying_only>)
  Returns: (str, dict, int)

    Returns the command name, command arguments, and repeat count for the given
    history entry, as stored in the undo / redo stack.

    Index 0 corresponds to the most recent command, -1 the command before that,
    and so on. Positive values for index indicate to look in the redo stack for
    commands. If the undo / redo history doesn't extend far enough, then
    `(None, None, 0)` will be returned.

    Setting `modifying_only` to `True` (the default is `False`) will only return
    entries that modified the buffer.


*view.change_count*()
  Returns: int

    Returns the current change count. Each time the buffer is modified, the
    change count is incremented. The change count can be used to determine if
    the buffer has changed since the last it was inspected.


*view.fold*([regions])
  Returns: bool

    Folds the given `regions`, returning `False` if they were already folded


*view.fold*(region)
  Returns: bool

    Folds the given `region`, returning `False` if it was already folded


*view.unfold*(region)
  Returns: [|Region|]

    Unfolds all text in the `region`, returning the unfolded regions


*view.unfold*([regions])
  Returns: [|Region|]

    Unfolds all text in the `regions`, returning the unfolded regions


*view.encoding*()
  Returns: str

    Returns the encoding currently associated with the file


*view.set_encoding*(encoding)
  Returns: None

    Applies a new encoding to the file. This encoding will be used the next time
    the file is saved.


*view.line_endings*()
  Returns: str

    Returns the line endings used by the current file.


*view.set_line_endings*(line_endings)
  Returns: None

    Sets the line endings that will be applied when next saving.


*view.overwrite_status*()
  Returns: bool

    Returns the overwrite status, which the user normally toggles via the insert
    key.


*view.set_overwrite_status*(enabled)
  Returns: None

    Sets the overwrite status.


*view.symbols*()
  Returns: [(|Region|, str)]

    Extract all the symbols defined in the buffer.


*view.show_popup_menu*(items, on_done, <flags>)
  Returns: None

    Shows a pop up menu at the caret, to select an item in a list. `on_done`
    will be called once, with the index of the selected item. If the pop up menu
    was cancelled, `on_done` will be called with an argument of -1.

    `items` is a list of strings.

    `flags` it currently unused.


*view.show_popup*(content, <flags>, <location>, <max_width>, <max_height>,
                  <on_navigate>, <on_hide>)
  Returns: None

    Shows a popup displaying HTML content.

    `flags` is a bitwise combination of the following:

    * `sublime.COOPERATE_WITH_AUTO_COMPLETE`. Causes the popup to display next
      to the auto complete menu

    * `sublime.HIDE_ON_MOUSE_MOVE`. Causes the popup to hide when the mouse is
      moved, clicked or scrolled

    * `sublime.HIDE_ON_MOUSE_MOVE_AWAY`. Causes the popup to hide when the mouse
      is moved (unless towards the popup), or when clicked or scrolled

    The default `location` of `-1` will display the popup at the cursor,
    otherwise a text point should be passed.

    `max_width` and `max_height` set the maximum dimensions for the popup, after
    which scroll bars will be displayed.

    `on_navigate` is a callback that should accept a string contents of the
    `href` attribute on the link the user clicked.

    `on_hide` is called when the popup is hidden.


*view.update_popup*(content)
  Returns: None

    Updates the contents of the currently visible popup.


*view.is_popup_visible*()
  Returns: bool

    Returns if the popup is currently shown.


*view.hide_popup*()
  Returns: None

    Hides the popup.


*view.is_auto_complete_visible*()
  Returns: bool

    Returns if the auto complete menu is currently visible.


--------------------------------------------------------------------------------
API Help Copyright © Sublime HQ Pty Ltd                     |api_reference.html|