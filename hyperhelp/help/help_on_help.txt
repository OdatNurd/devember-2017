%hyperhelp title="How to use HyperHelp" date="2017-12-31"

*|Introduction|*
============

HyperHelp is a Sublime Text dependency package that provides a simple text
based, context sensitive help system for Sublime Text 3. Using HyperHelp,
package author can easily provide interactive help for their packages in a way
that is consistent with other packages using HyperHelp.

HyperHelp allows you to easily add help to any package in Sublime Text, which
includes not only third party packages but also your own `User` package. This
allows you to create your own custom set of user specific documentation for
reference materials you often refer to, all without having to leave Sublime.


*|Navigating	Help|*
===============

This tab contains a HyperHelp |help view| for displaying help text. Along with
regular text, help files can also contain some simple |markup|. The most
important things are:

    * Text within `|` characters are |links|, which take you to other
      navigation locations in a help file.
    * Text within `*` characters are |anchors|, which provide the destination
      that a link jumps to.

The common navigation keys you're used to using in Sublime allow you to move
around within help files. Additionally, the following additional key bindings
are also available:

    <?>
        Open the |table	of	contents| for the package currently being displayed
        so you can navigate the logical structure of the help provided.

    <Tab>/<Shift+Tab>
        Move the cursor to the next or previous |anchor| within the current
        help file. This allows you to skip between points  of interest within
        a help file.

    <Enter>/<Double	Click>
        Follow a |link| to an |anchor| in this or some other help file.

    <Alt+Left>/<Alt+Right>
        Navigate forward and backward through the |history| of topics that have
        been visited in this |help	view|.


*|Help	View|*
=========

Each Sublime window has it's own `help view` with a |history| independent of
other help views in other windows. This allows you to keep the help most
relevant to the work at hand available.

A single help view always displays help provided by one package at a time,
although you can freely switch the help package at any time in order to see
more relevant help.


*|History|*
=======

Each |help	view| records a history of the topics that it has displayed since it
was created. This works similarly to how history works in your web browser:

    * Opening a new help file adds that file to the end of the history.

    * When moving backwards and forwards through the history, the file and
      cursor position is saved before a topic is left and restored to what it
      was when you return.

It is important to note that if you move backwards through history to a
previous topic and then navigate to a new help file, the previous history after
the current topic is replaced with the new topic you visited.

See the section on |navigating	help| for information on how to move through
history in the help view.


*|Opening	Help|*
============

Opening the initial help view in a window can be accomplished by:


  * Selecting `HyperHelp: Browse Available Help` in the command   palette or
    `Help > hyperhelp > Browse Available Help...` from the menu will show you
    a list of all packages that currently provide help.

  * Custom key bindings, command palette entries or menu items that use the
    appropriate |commands| to open help for a package. These can be created by
    you or by a package author.

  * Packages can open context sensitive help to provide more information on
    their operation at any point. How this works is up to the package author
    and the package in question.


*|Next	Steps|*
==========

Now that you know a little bit more about HyperHelp, feel free to explore
the help system a little bit and see what you can do.

To begin, use the <?> key to open the |table	of	contents| for this help and
explore around to get more information on how things work.

If you're a package author you may want to check out |integration.txt| to see
how you can integrate HyperHelp into your own package (pro tip: it's super
easy).

You may also want to check out |authoring.txt| to see more information on how
to create help files and the authoring tools that are available.
